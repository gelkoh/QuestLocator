// <auto-generated />
//
// To parse this JSON data, add NuGet 'Newtonsoft.Json' then do:
//
//    using QuickType;
//
//    var root = Root.FromJson(jsonString);

using System;
using System.Collections.Generic;

using System.Globalization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;

public partial class Root
{
    [JsonProperty("code")]
    public string Code { get; set; }

    [JsonProperty("product")]
    public Product Product { get; set; }

    [JsonProperty("status")]
    public long Status { get; set; }

    [JsonProperty("status_verbose")]
    public string StatusVerbose { get; set; }
}

public partial class Product
{
    [JsonProperty("_id")]
    public string Id { get; set; }

    [JsonProperty("brands_tags")]
    public string[] BrandsTags { get; set; }

    [JsonProperty("ecoscore_grade")]
    public string EcoscoreGrade { get; set; }

    [JsonProperty("ingredients")]
    public Ingredient[] Ingredients { get; set; }

    [JsonProperty("ingredients_analysis_tags")]
    public string[] IngredientsAnalysisTags { get; set; }

    [JsonProperty("nutriments")]
    public Nutriments Nutriments { get; set; }

    [JsonProperty("nutriscore_grade")]
    public string NutriscoreGrade { get; set; }

    [JsonProperty("product_name")]
    public string ProductName { get; set; }

    [JsonProperty("product_quantity")]
    [JsonConverter(typeof(ParseStringConverter))]
    public long ProductQuantity { get; set; }

    [JsonProperty("product_quantity_unit")]
    public string ProductQuantityUnit { get; set; }

    [JsonProperty("schema_version")]
    public long SchemaVersion { get; set; }
}

public partial class Ingredient
{
    [JsonProperty("ciqual_proxy_food_code", NullValueHandling = NullValueHandling.Ignore)]
    [JsonConverter(typeof(ParseStringConverter))]
    public long? CiqualProxyFoodCode { get; set; }

    [JsonProperty("ecobalyse_code", NullValueHandling = NullValueHandling.Ignore)]
    public string EcobalyseCode { get; set; }

    [JsonProperty("id")]
    public string Id { get; set; }

    [JsonProperty("is_in_taxonomy")]
    public long IsInTaxonomy { get; set; }

    [JsonProperty("percent_estimate")]
    public double PercentEstimate { get; set; }

    [JsonProperty("percent_max")]
    public double PercentMax { get; set; }

    [JsonProperty("percent_min")]
    public double PercentMin { get; set; }

    [JsonProperty("text")]
    public string Text { get; set; }

    [JsonProperty("vegan", NullValueHandling = NullValueHandling.Ignore)]
    public string Vegan { get; set; }

    [JsonProperty("vegetarian", NullValueHandling = NullValueHandling.Ignore)]
    public string Vegetarian { get; set; }

    [JsonProperty("ciqual_food_code", NullValueHandling = NullValueHandling.Ignore)]
    [JsonConverter(typeof(ParseStringConverter))]
    public long? CiqualFoodCode { get; set; }

    [JsonProperty("from_palm_oil", NullValueHandling = NullValueHandling.Ignore)]
    public string FromPalmOil { get; set; }
}

public partial class Nutriments
{
    [JsonProperty("carbohydrates")]
    public double Carbohydrates { get; set; }

    [JsonProperty("carbohydrates_100g")]
    public double Carbohydrates100G { get; set; }

    [JsonProperty("carbohydrates_unit")]
    public string CarbohydratesUnit { get; set; }

    [JsonProperty("carbohydrates_value")]
    public double CarbohydratesValue { get; set; }

    [JsonProperty("energy")]
    public double Energy { get; set; }

    [JsonProperty("energy-kcal")]
    public double EnergyKcal { get; set; }

    [JsonProperty("energy-kcal_100g")]
    public double EnergyKcal100G { get; set; }

    [JsonProperty("energy-kcal_unit")]
    public string EnergyKcalUnit { get; set; }

    [JsonProperty("energy-kcal_value")]
    public double EnergyKcalValue { get; set; }

    [JsonProperty("energy-kcal_value_computed")]
    public double EnergyKcalValueComputed { get; set; }

    [JsonProperty("energy_100g")]
    public double Energy100G { get; set; }

    [JsonProperty("energy_unit")]
    public string EnergyUnit { get; set; }

    [JsonProperty("energy_value")]
    public double EnergyValue { get; set; }

    [JsonProperty("fat")]
    public double Fat { get; set; }

    [JsonProperty("fat_100g")]
    public double Fat100G { get; set; }

    [JsonProperty("fat_unit")]
    public string FatUnit { get; set; }

    [JsonProperty("fat_value")]
    public double FatValue { get; set; }

    [JsonProperty("fruits-vegetables-legumes-estimate-from-ingredients_100g")]
    public double FruitsVegetablesLegumesEstimateFromIngredients100G { get; set; }

    [JsonProperty("fruits-vegetables-legumes-estimate-from-ingredients_serving")]
    public double FruitsVegetablesLegumesEstimateFromIngredientsServing { get; set; }

    [JsonProperty("fruits-vegetables-nuts-estimate-from-ingredients_100g")]
    public double FruitsVegetablesNutsEstimateFromIngredients100G { get; set; }

    [JsonProperty("fruits-vegetables-nuts-estimate-from-ingredients_serving")]
    public double FruitsVegetablesNutsEstimateFromIngredientsServing { get; set; }

    [JsonProperty("nova-group")]
    public double NovaGroup { get; set; }

    [JsonProperty("nova-group_100g")]
    public double NovaGroup100G { get; set; }

    [JsonProperty("nova-group_serving")]
    public double NovaGroupServing { get; set; }

    [JsonProperty("nutrition-score-fr")]
    public double NutritionScoreFr { get; set; }

    [JsonProperty("nutrition-score-fr_100g")]
    public double NutritionScoreFr100G { get; set; }

    [JsonProperty("proteins")]
    public double Proteins { get; set; }

    [JsonProperty("proteins_100g")]
    public double Proteins100G { get; set; }

    [JsonProperty("proteins_unit")]
    public string ProteinsUnit { get; set; }

    [JsonProperty("proteins_value")]
    public double ProteinsValue { get; set; }

    [JsonProperty("salt")]
    public double Salt { get; set; }

    [JsonProperty("salt_100g")]
    public double Salt100G { get; set; }

    [JsonProperty("salt_unit")]
    public string SaltUnit { get; set; }

    [JsonProperty("salt_value")]
    public double SaltValue { get; set; }

    [JsonProperty("saturated-fat")]
    public double SaturatedFat { get; set; }

    [JsonProperty("saturated-fat_100g")]
    public double SaturatedFat100G { get; set; }

    [JsonProperty("saturated-fat_unit")]
    public string SaturatedFatUnit { get; set; }

    [JsonProperty("saturated-fat_value")]
    public double SaturatedFatValue { get; set; }

    [JsonProperty("sodium")]
    public double Sodium { get; set; }

    [JsonProperty("sodium_100g")]
    public double Sodium100G { get; set; }

    [JsonProperty("sodium_unit")]
    public string SodiumUnit { get; set; }

    [JsonProperty("sodium_value")]
    public double SodiumValue { get; set; }

    [JsonProperty("sugars")]
    public double Sugars { get; set; }

    [JsonProperty("sugars_100g")]
    public double Sugars100G { get; set; }

    [JsonProperty("sugars_unit")]
    public string SugarsUnit { get; set; }

    [JsonProperty("sugars_value")]
    public double SugarsValue { get; set; }
}



internal class ParseStringConverter : JsonConverter
{
    public override bool CanConvert(Type t) => t == typeof(long) || t == typeof(long?);

    public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
    {
        if (reader.TokenType == JsonToken.Null) return null;
        var value = serializer.Deserialize<string>(reader);
        long l;
        if (Int64.TryParse(value, out l))
        {
            return l;
        }
        throw new Exception("Cannot unmarshal type long");
    }

    public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
    {
        if (untypedValue == null)
        {
            serializer.Serialize(writer, null);
            return;
        }
        var value = (long)untypedValue;
        serializer.Serialize(writer, value.ToString());
        return;
    }

    public static readonly ParseStringConverter Singleton = new ParseStringConverter();
}

